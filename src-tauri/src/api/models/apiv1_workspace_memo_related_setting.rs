/*
 * api/v1/activity_service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 * Generated by: https://openapi-generator.tech
 */

use super::super::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Apiv1WorkspaceMemoRelatedSetting {
    /// disallow_public_visibility disallows set memo as public visibility.
    #[serde(
        rename = "disallowPublicVisibility",
        skip_serializing_if = "Option::is_none"
    )]
    pub disallow_public_visibility: Option<bool>,
    /// display_with_update_time orders and displays memo with update time.
    #[serde(
        rename = "displayWithUpdateTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub display_with_update_time: Option<bool>,
    /// content_length_limit is the limit of content length. Unit is byte.
    #[serde(rename = "contentLengthLimit", skip_serializing_if = "Option::is_none")]
    pub content_length_limit: Option<i32>,
    /// enable_double_click_edit enables editing on double click.
    #[serde(
        rename = "enableDoubleClickEdit",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_double_click_edit: Option<bool>,
    /// enable_link_preview enables links preview.
    #[serde(rename = "enableLinkPreview", skip_serializing_if = "Option::is_none")]
    pub enable_link_preview: Option<bool>,
    /// enable_comment enables comment.
    #[serde(rename = "enableComment", skip_serializing_if = "Option::is_none")]
    pub enable_comment: Option<bool>,
    /// reactions is the list of reactions.
    #[serde(rename = "reactions", skip_serializing_if = "Option::is_none")]
    pub reactions: Option<Vec<String>>,
    /// disable_markdown_shortcuts disallow the registration of markdown shortcuts.
    #[serde(
        rename = "disableMarkdownShortcuts",
        skip_serializing_if = "Option::is_none"
    )]
    pub disable_markdown_shortcuts: Option<bool>,
    /// enable_blur_nsfw_content enables blurring of content marked as not safe for work (NSFW).
    #[serde(
        rename = "enableBlurNsfwContent",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_blur_nsfw_content: Option<bool>,
    /// nsfw_tags is the list of tags that mark content as NSFW for blurring.
    #[serde(rename = "nsfwTags", skip_serializing_if = "Option::is_none")]
    pub nsfw_tags: Option<Vec<String>>,
}

impl Apiv1WorkspaceMemoRelatedSetting {
    pub fn new() -> Apiv1WorkspaceMemoRelatedSetting {
        Apiv1WorkspaceMemoRelatedSetting {
            disallow_public_visibility: None,
            display_with_update_time: None,
            content_length_limit: None,
            enable_double_click_edit: None,
            enable_link_preview: None,
            enable_comment: None,
            reactions: None,
            disable_markdown_shortcuts: None,
            enable_blur_nsfw_content: None,
            nsfw_tags: None,
        }
    }
}
